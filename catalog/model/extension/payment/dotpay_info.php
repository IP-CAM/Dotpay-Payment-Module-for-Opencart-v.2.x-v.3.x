<?php

/**
 * Model of information about ending of cash of transfer payments.
 */
class ModelExtensionPaymentDotpayInfo extends Model
{
    /**
     * Name of table in database.
     */
    const TABLE = 'dotpay_instructions';

    /**
     * Name of recipient of payment.
     */
    const DOTPAY_NAME = 'Dotpay sp. z o.o.';

    /**
     * Street of recipient.
     */
    const DOTPAY_STREET = 'Wielicka 28B';

    /**
     * Postcode adn city of recipient.
     */
    const DOTPAY_CITY = '30-552 KrakÃ³w';

    /**
     * Returns information based on order id.
     *
     * @param int $orderId Order id
     *
     * @return array
     */
    public function getByOrderId($orderId)
    {
        $result = $this->db->query('
            SELECT * 
            FROM `'.DB_PREFIX.self::TABLE.'` 
            WHERE order_id = '.(int) $orderId
        );
        if (!is_array($result->rows) || count($result->rows) == 0) {
            return null;
        }

        return $result->rows[count($result) - 1];
    }

    /**
     * Returns hash from given payment.
     *
     * @param array $payment Details of payment
     *
     * @return string
     */
    public function gethashFromPayment($payment)
    {
        $parts = explode('/', $payment['instruction']['instruction_url']);

        return $parts[count($parts) - 2];
    }

    /**
     * Returns address of bank page, where a money transfer could be made.
     *
     * @param string $baseUrl base url of Dotpay page
     * @param string $number  Number of payment
     * @param string $hash    Hash generated by payment mechanism
     *
     * @return string
     */
    public function getBankPage($baseUrl, $number, $hash)
    {
        $url = $this->buildInstructionUrl($baseUrl, $number, $hash);
        $html = file_get_html($url);
        if ($html == false) {
            return null;
        }

        return $html->getElementById('channel_container_')->firstChild()->getAttribute('href');
    }

    /**
     * Returns address of pdf with blankiet with data of payment.
     *
     * @param string $baseUrl base url of Dotpay page
     * @param string $number  Number of payment
     * @param string $hash    Hash generated by payment mechanism
     *
     * @return string
     */
    public function getPdfUrl($baseUrl, $number, $hash)
    {
        return $baseUrl.'instruction/pdf/'.$number.'/'.$hash.'/';
    }

    /**
     * Returns address of page with instruction of completion of payments.
     *
     * @param string $baseUrl base url of Dotpay page
     * @param string $number  Number of payment
     * @param string $hash    Hash generated by payment mechanism
     *
     * @return string
     */
    protected function buildInstructionUrl($baseUrl, $number, $hash)
    {
        return $baseUrl.'instruction/'.$number.'/'.$hash.'/';
    }

    /**
     * Adds instruction data to shop's database.
     *
     * @param type $orderId     Order id
     * @param type $number      Number of payment
     * @param type $hash        Hash of payment
     * @param type $bankAccount Number of bank account of reciepient
     * @param type $isCash      Flag, if payment has a cash type
     * @param type $amount      Amount of payment
     * @param type $currency    Currency of payment
     * @param type $channel     Number of channel of payment
     */
    public function addInstruction($orderId, $number, $hash, $bankAccount, $isCash, $amount, $currency, $channel)
    {
        $existedInfo = $this->db->query('SELECT * FROM `'.DB_PREFIX.self::TABLE.'` WHERE order_id = '.(int) $orderId);
        if (empty($existedInfo->rows[0])) {
            $this->db->query(
                'INSERT 
                    INTO `'.DB_PREFIX.self::TABLE.'`(order_id, number, hash, bank_account, is_cash, amount, currency, channel) 
                    VALUES('.(int) $orderId.',\' '.$number.'\', \''.$hash.'\', \''.$bankAccount.'\', '.(int) $isCash.', '.(float) $amount.', \''.$currency.'\', '.$channel.')'
            );
        }
    }
}
